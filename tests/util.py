import unittest
from dflow_galaxy.core import util


class TestUtil(unittest.TestCase):

    def test_select_chunk(self):
        in_list = list(range(5))

        self.assertEqual(util.select_chunk(in_list, 1, 0), in_list)
        with self.assertRaises(AssertionError):
            util.select_chunk(in_list, 1, 1)

        self.assertEqual(util.select_chunk(in_list, 2, 0), [0, 1, 2])
        self.assertEqual(util.select_chunk(in_list, 2, 1), [3, 4])

        self.assertEqual(util.select_chunk(in_list, 5, 0), [0])
        self.assertEqual(util.select_chunk(in_list, 5, 4), [4])

        self.assertEqual(util.select_chunk(in_list, 6, 0), [0])
        self.assertEqual(util.select_chunk(in_list, 6, 5), [])

    def test_bash_select_chunk(self):
        actual = util.bash_select_chunk('in_file', 5, 1, 'out_file')
        expected = """# generated by: bash_select_chunk(in_file, 5, 1, out_file)
python << EOF > out_file
import sys
with open('in_file', 'r') as f:
    lines = f.readlines()
lines = [line for line in lines if line.strip()]
n, i = 5, 1
chunk_size = len(lines) // n

start = i * chunk_size
end = (i + 1) * chunk_size if i < n - 1 else len(lines)

for line in lines[start:end]:
    sys.stdout.write(line)
EOF
# end of bash_select_chunk"""
        self.assertEqual(actual, expected)


if __name__ == '__main__':
    unittest.main()
